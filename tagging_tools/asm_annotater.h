/*
 * Copyright Â© 2017-2018 Dover Microsystems, Inc.
 * All rights reserved. 
 *
 * Use and disclosure subject to the following license. 
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef ASM_ANNOTATER_H
#define ASM_ANNOTATER_H

#include <cstdint>
#include <istream>
#include <string>

namespace policy_engine {

/**
   Utility class that will take an input ASM file, as generated by gcc, and produce a filtered output file.

   The class is designed to be derived from to implement custom filters.  The base implementation here will
   produce the same output as input (IOW, base filters are NOPs).

   Each line of the input file is parsed to determine what filter to apply.  Currently, there are two filters:
   one for lines that appear to contain no instructions, and one for lines that do.  Lines that contain an
   instruction are determined by whitespace preceding a hex number followed by a colon.  Any line that
   contains an instruction is handed to a filter with the entire line, with the hex number parsed out as
   an address.  All other lines are passed to a filter that is just given the input line.  The filters
   are supposed to return a new line to be output to the output file.  The annotater class will generate an
   end of line for each line, so filters should not expect to see an EOL on input lines, or to need to
   generate one on the output line.
*/
class asm_annotater_t {
  std::istream &input;
  std::ostream &output;

  public:

  /**
     Construct with an input stream and an output stream.
   */
  asm_annotater_t(std::istream &input, std::ostream &output) : input(input), output(output) { }

  /**
     Call this to parse the entire input stream, calling filters along the way.
   */
  void execute();

  /**
     Implement this filter to be called for lines that contain instructions.  Lines that contain instructions
     look like this:
    1954:	6828      	ldr	r0, [r5, #0]

    The <code>addr</code> parameter will be set to the value of the hex number preceding the colon.
    The <code>line</code> parameter will contain the entire input line.
   */
  virtual std::string filter(uint64_t addr, std::string line) { return line; }

  /**
     Implement this filter to be called for all other lines besides instruction lines.  E.g.:
00001970 <_close_r>:
    The <code>line</code> parameter will contain the entire input line.
   */
  virtual std::string filter(std::string line) { return line; }

  static std::string pad(std::string str, int width);
};

} // namespace policy_engine

#endif
